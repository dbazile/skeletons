plugins {
    id 'java'
    id 'application'
    id 'maven-publish'

    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'nebula.release' version '9.2.0'
    id 'org.ajoberstar.grgit' version '3.0.0'
}


group = 'dbazile'

mainClassName = 'dbazile.Main'

sourceCompatibility = 1.9
targetCompatibility = 1.9


dependencies {
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:slf4j-log4j12:1.7.25'
    compile 'log4j:log4j:1.2.17'

    // JAX-RS + Embedded Jetty
    compile 'org.glassfish.jersey.core:jersey-server:2.27'
    compile 'org.glassfish.jersey.containers:jersey-container-jetty-http:2.27'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.27'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.27'
    compile 'org.eclipse.jetty:jetty-server:9.4.12.v20180830'

    // JAXB
    compile 'javax.xml.bind:jaxb-api:2.3.0'
    compile 'org.glassfish.jaxb:jaxb-runtime:2.3.0.1'
    compile 'javax.activation:activation:1.1.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.19.0'
}


repositories {
    mavenCentral()
}


publishing {
    repositories {
        maven {
            url "https://maven-internal/path/to/${version.toString().endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
            credentials {
                username = ''
                password = ''
            }
        }
    }

    publications {
        maven(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar
        }
    }
}


jar {
    manifest.attributes(
        'Implementation-Title':   project.name,
        'Implementation-Version': project.version,
        'Main-Class':             mainClassName,
        'Build-Author':           System.getProperty('user.name'),
        'Build-Host':             InetAddress.localHost.hostName,
        'Build-Timestamp':        new Date(),
        'Git-Commit':             grgit.head().id,
    )
}


shadowJar {
    // Fixes path collisions in META-INF/services
    mergeServiceFiles()
}


/*
 * NOTE: This is here as a reference if shadow plugin can't be used for
 *       whatever reason.
 */
// task fatjar(type: Jar) {
//     with jar
//     appendix = 'bundle'
//     duplicatesStrategy = DuplicatesStrategy.WARN
//     manifest.attributes = jar.manifest.attributes
//
//     from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } {
//         exclude 'META-INF/LICENSE*'
//         exclude 'META-INF/NOTICE*'
//         exclude 'META-INF/*.SF'
//         exclude 'META-INF/*.DSA'
//         exclude 'META-INF/*.RSA'
//
//         // Deal with clobbering of Jersey autoscan config files
//         filesMatching 'META-INF/services/org.glassfish.jersey.internal.spi.*Discoverable', {
//
//             // Silence duplication warning since we're about to "fix" it
//             duplicatesStrategy = DuplicatesStrategy.INCLUDE
//
//             // Manually concat into build dir
//             try {
//                 def destinationFile = file("build/tmp/fatjar/META-INF/services/$it.name")
//                 def content = it.file.text.trim()
//                 logger.debug('Attempting to manually concat {}:\n---\nContent:\n{}\n---', it.relativePath, content)
//
//                 // Ensure directory tree exists
//                 destinationFile.parentFile.mkdirs()
//
//                 // Append
//                 destinationFile.append(content + '\n')
//             }
//             catch(Exception e) {
//                 logger.error('Concat failed', e)
//                 throw e
//             }
//         }
//
//         // Add the "fixed" files
//         from files('build/tmp/fatjar'), {
//             include 'META-INF/services/*'
//         }
//     }
// }


task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}


task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}


////////////////////////////////////////////////////////////////////////////////

// Helpers

/*
 * NOTE: This is here as a reference if grgit plugin can't be used for
 *       whatever reason.
 */
//def _getCommit(truncate = Integer.MAX_VALUE) {
//    new ByteArrayOutputStream().with { stream ->
//        exec {
//            commandLine = ['git', 'rev-parse', 'HEAD']
//            standardOutput = stream
//        }
//
//        return stream.toString().trim().take(truncate)
//    }
//}
