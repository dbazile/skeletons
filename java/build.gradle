plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
}


group                     = 'dbazile'
version                   = '1.0.0-SNAPSHOT'

sourceCompatibility       = 1.9
targetCompatibility       = 1.9

// Application Plugin
mainClassName             = 'dbazile.Main'
applicationDefaultJvmArgs = ["--add-modules=java.xml.bind"]


dependencies {
    compile(
            'org.slf4j:slf4j-api:1.7.25',
            'org.slf4j:slf4j-log4j12:1.7.25',
            'log4j:log4j:1.2.17',

            // JAX-RS + Embedded Jetty
            'org.glassfish.jersey.core:jersey-server:2.27',
            'org.glassfish.jersey.containers:jersey-container-servlet:2.27',
            'org.glassfish.jersey.media:jersey-media-json-jackson:2.27',
            'org.glassfish.jersey.inject:jersey-hk2:2.27',
            'org.eclipse.jetty:jetty-server:9.4.12.v20180830',
            'org.eclipse.jetty:jetty-servlet:9.4.12.v20180830',
    )

    testCompile(
            'junit:junit:4.12',
            'org.mockito:mockito-core:2.19.0',
    )
}


repositories {
    mavenCentral()
}


publishing {
    repositories {
        maven {
            url "https://maven-internal/path/to/${version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
            credentials {
                username = ''
                password = ''
            }
        }
    }

    publications {
        maven(MavenPublication) {
            from components.java
            artifact javadocJar
        }
    }
}


compileJava {
    options.compilerArgs = ['--add-modules', 'java.xml.bind']
}


jar {
    manifest.attributes(
        'Implementation-Title':   project.name,
        'Implementation-Version': project.version,
        'Main-Class':             mainClassName,
        'Build-Author':           System.getProperty('user.name'),
        'Build-Host':             InetAddress.localHost.hostName,
        'Build-Timestamp':        new Date(),
        'Git-Commit':             _getCommit(),
    )
}


javadoc {
    options.addStringOption('-add-modules', 'java.xml.bind')
}

///*
// * NOTE: This is just here as a simple reference. As it stands, JAX-RS JSON
// *       serialization doesn't work properly because of path collisions in
// *       META-INF/services/* (and probably a dozen more reasons) but it might
// *       work for applications that don't try too much classpath wizardry.
// */
//task bundle(type: Jar) {
//    appendix = 'bundle'
//    duplicatesStrategy = DuplicatesStrategy.WARN
//    manifest.attributes = jar.manifest.attributes
//
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } {
//        exclude 'META-INF/*.SF'
//        exclude 'META-INF/*.DSA'
//        exclude 'META-INF/*.RSA'
//    }
//
//    with jar
//}


task javadocJar(type: Jar) {
    dependsOn += javadoc

    from javadoc.destinationDir
    classifier 'javadoc'
}


////////////////////////////////////////////////////////////////////////////////

// Helpers

def _getCommit(truncate = Integer.MAX_VALUE) {
    new ByteArrayOutputStream().with { stream ->
        exec {
            commandLine = ['git', 'rev-parse', 'HEAD']
            standardOutput = stream
        }

        return stream.toString().trim().take(truncate)
    }
}
